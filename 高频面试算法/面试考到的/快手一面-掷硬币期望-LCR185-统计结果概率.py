"""
@Author: yanzx
@Time: 2025/8/28 20:28 
@Description:
185. 统计结果概率


你选择掷出 num 个色子，请返回所有点数总和的概率。

你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 num 个骰子所能掷出的点数集合中第 i 小的那个的概率。



示例 1：

输入：num = 3
输出：[0.00463,0.01389,0.02778,0.04630,0.06944,0.09722,0.11574,0.12500,0.12500,0.11574,0.09722,0.06944,0.04630,0.02778,0.01389,0.00463]
示例 2：

输入：num = 5
输出:[0.00013,0.00064,0.00193,0.00450,
     0.00900,0.01620,0.02636,0.03922,
     0.05401,0.06944,0.08372,0.09452,
     0.10031,0.10031,0.09452,0.08372,0.06944,0.05401,0.03922,0.02636,0.01620,0.00900,0.00450,0.00193,0.00064,0.00013]


提示：

1 <= num <= 11

num = 3
初始化dp

[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666,0.16666666666666666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

"""

from typing import List


class Solution:
    def statisticsProbability(self, num: int) -> List[float]:
        """
        dp[i][j] 表示掷骰子i次和为num的概率
        dp[i][j] =
        :param num:
        :return:
        """
        max_num = 6 * num
        min_num = num

        dp = [[0] * (max_num + 1) for _ in range(num + 1)]

        # 更新骰子为1的概率
        for j in range(1, 7):
            dp[1][j] = 1 / 6

        for i in range(2, num + 1):  # 骰子数量
            for j in range(i, 6 * i + 1):  # 骰子总和
                for k in range(1, 7):  # 骰子可能的点数
                    if j - k >= i-1:  # 合法，需要这一次的骰子总和大于上一轮的最小总和
                        dp[i][j] += dp[i-1][j - k] * 1 / 6

        return dp[-1][min_num:]


if __name__ == '__main__':
    s = Solution()
    res = s.statisticsProbability(3)
    print(res)


